// Generated by CoffeeScript 1.6.3
(function() {
  var define;

  if (typeof define === "undefined" || define === null) {
    define = require('amdefine')(module);
  }

  define(['../lib/mapper', '../lib/junction'], function(mapper, junction) {
    var exports, load, remove, save, _dehidrate, _flatten, _get_id, _save;
    _get_id = function(store, map, obj, callback) {
      if (map.id_field != null) {
        callback(obj[map.id_field]);
        return;
      }
      if (store[map.model_name] == null) {
        store[map.model_name] = 0;
      }
      store[map.model_name]++;
      return callback(store[map.model_name]);
    };
    _dehidrate = function(map, obj, source) {
      var actions;
      obj.id = source.id;
      mapper.apply(map, obj, source, actions = {
        'Simple': function(field_name, field_def, obj, source) {
          if (source[field_name] != null) {
            return obj[field_name] = source[field_name];
          }
        },
        'SimpleList': function(field_name, field_def, obj, source) {
          if (source[field_name] != null) {
            return obj[field_name] = source[field_name].toString();
          }
        },
        'Ref': function(field_name, field_def, obj, source) {
          if (source[field_name] != null) {
            return obj[field_name] = source[field_name].id;
          }
        }
      });
      return obj;
    };
    _save = function(store, map, obj, callback) {
      var actions, obj_save_j, saved_obj;
      saved_obj = _dehidrate(map, {}, obj);
      obj_save_j = junction.create();
      store["" + map.model_name + ":" + obj.id] = saved_obj;
      if (store[map.default_collection] == null) {
        store[map.default_collection] = [];
      }
      store[map.default_collection].push(obj.id);
      mapper.apply(map, obj, {}, actions = {
        'List': function(field_name, field_def, obj, source) {
          var item, _i, _len, _ref, _results;
          if (obj[field_name] != null) {
            if (store["" + map.model_name + ":" + obj.id + ":" + field_name] == null) {
              store["" + map.model_name + ":" + obj.id + ":" + field_name] = [];
            }
            _ref = obj[field_name];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push(store["" + map.model_name + ":" + obj.id + ":" + field_name].push(item.id));
            }
            return _results;
          }
        }
      });
      return junction.finalise(obj_save_j, function() {
        return callback(obj);
      });
    };
    _flatten = function(map, obj, stack) {
      var actions, dict;
      if (stack == null) {
        stack = [];
      }
      stack.push(dict = {
        map: map,
        obj: obj
      });
      mapper.apply(map, obj, {}, actions = {
        'List': function(field_name, field_def, obj, source) {
          var item, _i, _len, _ref, _results;
          if (field_def.internal) {
            _ref = obj[field_name];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              if (item != null) {
                _results.push(_flatten(field_def.map, item, stack));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        },
        'Ref': function(field_name, field_def, obj, source) {
          if (field_def.internal) {
            if (obj[field_name] != null) {
              return _flatten(field_def.map, obj[field_name], stack);
            }
          }
        }
      });
      return stack;
    };
    load = function(store, map, key, callback) {
      return '';
    };
    save = function(store, map, obj, callback) {
      var flat_object_list, id_j, obj_map, _base, _i, _len;
      flat_object_list = _flatten(map, obj);
      id_j = junction.create();
      for (_i = 0, _len = flat_object_list.length; _i < _len; _i++) {
        obj_map = flat_object_list[_i];
        if ((_base = obj_map.obj).id == null) {
          _base.id = -1;
        }
        if (obj_map.obj.id === -1) {
          junction.call(id_j, _get_id, store, obj_map.map, obj_map.obj, function(id) {
            return obj_map.obj.id = id;
          });
        }
      }
      return junction.finalise(id_j, function() {
        var save_j, _j, _len1;
        save_j = junction.create();
        for (_j = 0, _len1 = flat_object_list.length; _j < _len1; _j++) {
          obj_map = flat_object_list[_j];
          junction.call(save_j, _save, store, obj_map.map, obj_map.obj, function(obj) {});
        }
        return junction.finalise(save_j, function() {
          return callback(obj);
        });
      });
    };
    remove = function(store, map, obj, callback) {
      return '';
    };
    return exports = {
      _get_id: _get_id,
      load: load,
      save: save,
      remove: remove
    };
  });

}).call(this);
