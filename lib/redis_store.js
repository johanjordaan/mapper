// Generated by CoffeeScript 1.6.3
(function() {
  var define;

  if (typeof define === "undefined" || define === null) {
    define = require('amdefine')(module);
  }

  define(['redis', '../lib/junction'], function(redis, junction) {
    var exports;
    return exports = {
      get_id: function(store, name, callback) {
        return store.client.incr(name, function(err, id) {
          return callback(id);
        });
      },
      save: function(store, name, obj, callback) {
        var key;
        key = "" + name + ":" + obj.id;
        return store.client.hmset(key, obj, function(err, reply) {
          return callback();
        });
      },
      save_refs: function(store, name, obj, ref_list, callback) {
        var key, multi, ref_id, ref_name, refs, _i, _len;
        multi = store.client.multi();
        for (ref_name in ref_list) {
          refs = ref_list[ref_name];
          key = "" + name + ":" + obj.id + ":" + ref_name;
          for (_i = 0, _len = refs.length; _i < _len; _i++) {
            ref_id = refs[_i];
            multi.sadd(key, ref_id);
          }
        }
        return multi.exec(function(err, reply) {
          return callback();
        });
      },
      load_collection: function(store, name, callback) {
        return store.client.smembers(name, function(err, ids) {
          var id, ret_val, _i, _len;
          ret_val = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            ret_val.push(Number(id));
          }
          return callback(ret_val);
        });
      },
      add_to_collection: function(store, name, obj, callback) {
        return store.client.sadd(name, obj.id, function(err, reply) {
          return callback();
        });
      },
      load: function(store, name, id, callback) {
        var key;
        key = "" + name + ":" + id;
        return store.client.hgetall(key, function(err, obj) {
          obj.id = id;
          return callback(obj);
        });
      },
      load_refs: function(store, name, id, field_names, callback) {
        var field_name, key, multi, ret_val, _i, _len;
        ret_val = {};
        multi = store.client.multi();
        for (_i = 0, _len = field_names.length; _i < _len; _i++) {
          field_name = field_names[_i];
          key = "" + name + ":" + id + ":" + field_name;
          multi.smembers(key);
        }
        return multi.exec(function(err, reply) {
          var idx, _j, _len1;
          for (idx = _j = 0, _len1 = field_names.length; _j < _len1; idx = ++_j) {
            field_name = field_names[idx];
            ret_val[field_name] = reply[idx];
          }
          return callback(ret_val);
        });
      }
    };
  });

}).call(this);
