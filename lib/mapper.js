// Generated by CoffeeScript 1.6.3
(function() {
  var define,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof define === "undefined" || define === null) {
    define = require('amdefine')(module);
  }

  define([], function() {
    var apply, create, exports, update;
    apply = function(map, obj, source, actions, filter) {
      var field_def, field_name, _ref;
      _ref = map.fields;
      for (field_name in _ref) {
        field_def = _ref[field_name];
        if (actions[field_def.type] != null) {
          if (filter != null) {
            if (filter(field_name, field_def, obj, source)) {
              actions[field_def.type](field_name, field_def, obj, source);
            }
          } else {
            actions[field_def.type](field_name, field_def, obj, source);
          }
        }
      }
      return obj;
    };
    update = function(map, obj, source) {
      var actions, field_def, field_name, i, _ref;
      if (obj == null) {
        obj = {};
      }
      if (source == null) {
        source = {};
      }
      if (source.id == null) {
        source.id = -1;
      }
      obj.id = source.id;
      apply(map, obj, source, actions = {
        Simple: function(field_name, field_def, obj, source) {
          if (field_def.conversion != null) {
            return obj[field_name] = field_def.conversion(source[field_name]);
          } else {
            return obj[field_name] = source[field_name];
          }
        },
        List: function(field_name, field_def, obj, source) {
          var item, _i, _len, _ref, _results;
          _ref = source[field_name];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            obj[field_name] = [];
            _results.push(obj[field_name].push(update(field_def.map, {}, item)));
          }
          return _results;
        },
        Ref: function(field_name, field_def, obj, source) {
          return obj[field_name] = update(field_def.map, {}, source[field_name]);
        }
      }, function(field_name, field_def, obj, source) {
        return __indexOf.call(Object.keys(source), field_name) >= 0;
      });
      _ref = map.fields;
      for (field_name in _ref) {
        field_def = _ref[field_name];
        if (__indexOf.call(Object.keys(source), field_name) < 0) {
          if (field_def.type === 'Simple') {
            obj[field_name] = field_def.default_value;
          } else if (field_def.type === 'List') {
            obj[field_name] = [
              (function() {
                var _i, _len, _ref1, _results;
                _ref1 = field_def.default_value;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  i = _ref1[_i];
                  _results.push(i);
                }
                return _results;
              })()
            ];
          } else if (field_def.type === 'SimpleList') {
            obj[field_name] = field_def.default_value.slice;
          } else if (field_def.type === 'Ref') {
            obj[field_name] = create(field_def.map, field_def.default_value);
          }
        }
      }
      return obj;
    };
    create = function(map, initial_data) {
      return update(map, {}, initial_data);
    };
    return exports = {
      apply: apply,
      update: update,
      create: create
    };
  });

}).call(this);
