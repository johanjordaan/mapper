// Generated by CoffeeScript 1.6.3
(function() {
  var define;

  if (typeof define === "undefined" || define === null) {
    define = require('amdefine')(module);
  }

  define(['../lib/mapper', '../lib/junction'], function(mapper, junction) {
    var exports, get_id, load, remove, save, save_all, _dehidrate, _load, _save;
    get_id = function(store, store_funcs, map, obj, callback) {
      if (map.id_field != null) {
        return callback(obj[map.id_field]);
      } else {
        return store_funcs.get_id(store, map.model_name, callback);
      }
    };
    _dehidrate = function(map, obj, source) {
      var actions;
      obj.id = source.id;
      mapper.apply(map, obj, source, actions = {
        'Simple': function(field_name, field_def, obj, source) {
          if (source[field_name] != null) {
            return obj[field_name] = source[field_name];
          }
        },
        'SimpleList': function(field_name, field_def, obj, source) {
          if (source[field_name] != null) {
            return obj[field_name] = source[field_name].toString();
          }
        },
        'Ref': function(field_name, field_def, obj, source) {
          if (source[field_name] != null) {
            return obj[field_name] = source[field_name].id;
          }
        }
      });
      return obj;
    };
    _save = function(store, store_funcs, map, obj, callback) {
      var actions, obj_save_j, ref_list, saved_obj;
      saved_obj = _dehidrate(map, {}, obj);
      ref_list = {};
      mapper.apply(map, obj, {}, actions = {
        'List': function(field_name, field_def, obj, source) {
          var item, _i, _len, _ref, _results;
          if (obj[field_name] != null) {
            if (ref_list[field_name] == null) {
              ref_lits[field_name] = [];
            }
            _ref = obj[field_name];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push(ref_list[field_name].push(item.id));
            }
            return _results;
          }
        }
      });
      obj_save_j = junction.create();
      junction.call(obj_save_j, store_funcs.save, store, map.model_name, obj);
      junction.call(obj_save_j, store_funcs.save_refs, store, map.model_name, obj, ref_list);
      junction.call(obj_save_j, store_funcs.add_to_collection, store, map.default_collection, obj);
      return junction.finalise(obj_save_j, function() {
        return callback(obj);
      });
    };
    _load = function(j, store, store_funcs, map, id, callback) {
      var ret_val;
      ret_val = {};
      return store_funcs.load(map.model_name, id, function(loaded_object) {
        var actions;
        if (loaded_object != null) {
          ret_val = {
            id: id
          };
          mapper.apply(map, ret_val, loaded_object, actions = {
            'Simple': function(field_name, field_def, obj, source) {
              if (source != null) {
                return obj[field_name] = source[field_name];
              }
            },
            'SimpleList': function(field_name, field_def, obj, source) {
              return obj[field_name] = source[field_name].split(',');
            },
            'List': function(field_name, field_def, obj, source) {
              return store_funcs.load_refs(store, model_name, id, field_name, function(ref_list) {
                var item, list, _i, _len, _results;
                list = ref_list[field_name];
                obj[field_name] = [];
                _results = [];
                for (_i = 0, _len = list.length; _i < _len; _i++) {
                  item = list[_i];
                  _results.push(junction.call(j, _load, j, store, store_funcs, field_def.map, item, function(loaded_obj) {
                    return obj[field_name].push(loaded_obj);
                  }));
                }
                return _results;
              });
            },
            'Ref': function(field_name, field_def, obj, source) {
              if (source[field_name] != null) {
                return junction.call(j, _load, j, store, store_funcs, field_def.map, source[field_name], function(loaded_obj) {
                  return obj[field_name] = loaded_obj;
                });
              }
            }
          });
          return callback(ret_val);
        }
      });
    };
    load = function(store, store_funcs, map, id, callback) {
      var load_j, obj;
      load_j = junction.create();
      obj = {};
      junction.call(load_j, _load, load_j, store, store_funcs, map, id, function(loaded_obj) {
        return obj = loaded_obj;
      });
      return junction.finalise(load_j, function(stuff) {
        return callback(obj);
      });
    };
    save_all = function(store, store_funcs, objects, callback) {
      var obj_map, save_all_j, _i, _len;
      save_all_j = junction.create();
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        obj_map = objects[_i];
        junction.call(save_all_j, save, store, store_funcs, obj_map.map, obj_map.obj, function() {
          return obj_map.obj;
        });
      }
      return junction.finalise(save_all_j, function(objects) {
        return callback(objects);
      });
    };
    save = function(store, store_funcs, map, obj, callback) {
      var flat_object_list, id_j, obj_map, _base, _i, _len;
      flat_object_list = mapper.flatten(map, obj);
      id_j = junction.create();
      for (_i = 0, _len = flat_object_list.length; _i < _len; _i++) {
        obj_map = flat_object_list[_i];
        if ((_base = obj_map.obj).id == null) {
          _base.id = -1;
        }
        if (obj_map.obj.id === -1) {
          junction.call(id_j, get_id, store_funcs, store, obj_map.map, obj_map.obj, function(id) {
            return obj_map.obj.id = id;
          });
        }
      }
      return junction.finalise(id_j, function() {
        var save_j, _j, _len1;
        save_j = junction.create();
        for (_j = 0, _len1 = flat_object_list.length; _j < _len1; _j++) {
          obj_map = flat_object_list[_j];
          junction.call(save_j, _save, store, store_funcs, obj_map.map, obj_map.obj, function(obj) {});
        }
        return junction.finalise(save_j, function() {
          return callback(obj);
        });
      });
    };
    remove = function(store, store_funcs, map, obj, callback) {
      return '';
    };
    return exports = {
      _get_id: _get_id,
      load: load,
      save_all: save_all,
      save: save,
      remove: remove
    };
  });

}).call(this);
