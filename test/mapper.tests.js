// Generated by CoffeeScript 1.6.3
(function() {
  var define,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof define === "undefined" || define === null) {
    define = require('amdefine')(module);
  }

  define(['chai', '../lib/mapper', './test_maps'], function(chai, mapper, test_maps) {
    var should;
    should = chai.should();
    describe('apply', function() {
      it('should apply action to the Simple type', function() {
        var actions, obj, source;
        source = {
          name: 'johan'
        };
        obj = {};
        mapper.apply(test_maps.person_map, obj, source, actions = {
          Simple: function(field_name, field_def, obj, source) {
            return obj[field_name] = source[field_name];
          }
        }, function(field_name, field, obj, source) {
          return __indexOf.call(Object.keys(source), field_name) >= 0;
        });
        return obj['name'].should.equal(source.name);
      });
      it('should apply action to the SimpleList type', function() {
        var actions, obj, source;
        source = {
          lotto_numbers: [1, 2, 3]
        };
        obj = {};
        mapper.apply(test_maps.person_map, obj, source, actions = {
          SimpleList: function(field_name, field_def, obj, source) {
            var x, _i, _len, _ref, _results;
            obj[field_name] = [];
            _ref = source[field_name];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(obj[field_name].push(x));
            }
            return _results;
          }
        });
        obj['lotto_numbers'].length.should.equal(3);
        obj['lotto_numbers'][0].should.equal(source.lotto_numbers[0]);
        obj['lotto_numbers'][1].should.equal(source.lotto_numbers[1]);
        return obj['lotto_numbers'][2].should.equal(source.lotto_numbers[2]);
      });
      it('should apply action to the List type', function() {
        var actions, obj, source;
        source = {
          accounts: [
            {
              name: 'savings'
            }, {
              name: 'loan'
            }
          ]
        };
        obj = {};
        mapper.apply(test_maps.person_map, obj, source, actions = {
          List: function(field_name, field_def, obj, source) {
            var x, _i, _len, _ref, _results;
            obj[field_name] = [];
            _ref = source[field_name];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(obj[field_name].push(x));
            }
            return _results;
          }
        });
        obj['accounts'].length.should.equal(2);
        obj['accounts'][0].name.should.equal(source.accounts[0].name);
        return obj['accounts'][1].name.should.equal(source.accounts[1].name);
      });
      return it('should apply action to the Ref type', function() {
        var actions, obj, source;
        source = {
          contact_details: {
            email: "me@here.com"
          }
        };
        obj = {};
        mapper.apply(test_maps.person_map, obj, source, actions = {
          Ref: function(field_name, field_def, obj, source) {
            return obj[field_name] = 'Hallo';
          }
        });
        return obj['contact_details'].should.equal('Hallo');
      });
    });
    describe('update', function() {
      it('should ', function() {
        var obj;
        obj = mapper.update(test_maps.user_map);
        return obj.id.should.equal = -1;
      });
      it('should ', function() {
        var obj;
        obj = mapper.update(test_maps.user_map, {});
        return obj.id.should.equal = -1;
      });
      return it('should ', function() {
        var obj;
        obj = mapper.update(test_maps.user_map, {}, {
          email: 'me@here.com'
        });
        obj.id.should.equal = -1;
        return obj.email.should.equal('me@here.com');
      });
    });
    return describe('create', function() {
      return it('should ', function() {
        var obj;
        obj = mapper.create(test_maps.user_map);
        return obj.id.should.equal = -1;
      });
    });
  });

}).call(this);
