// Generated by CoffeeScript 1.6.3
(function() {
  var define,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof define === "undefined" || define === null) {
    define = require('amdefine')(module);
  }

  define(['redis', 'chai', './test_maps', '../lib/redis_store'], function(redis, chai, test_maps, redis_store) {
    var clear_db, debug_db, expect, should;
    should = chai.should();
    expect = chai.expect;
    debug_db = 15;
    clear_db = function(done) {
      var client;
      client = redis.createClient();
      client.select(debug_db);
      return client.FLUSHDB(function() {
        client.quit();
        return done();
      });
    };
    describe('get_id', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('it should get a new id from the store', function(done) {
        var store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        return redis_store.get_id(store, 'test', function(id) {
          id.should.equal = 1;
          return redis_store.get_id(store, 'test', function(id) {
            id.should.equal = 2;
            return done();
          });
        });
      });
    });
    describe('save', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('should save an object to the store', function(done) {
        var person, store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        person = {
          id: 2,
          name: 'johan'
        };
        return redis_store.save(store, 'Person', person, function() {
          return done();
        });
      });
    });
    describe('save_refs', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('should save an objects refs to the store', function(done) {
        var person, ref_list, store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        person = {
          id: 2,
          name: 'johan'
        };
        ref_list = {
          accounts: [1, 2],
          contact_details: [6, 5]
        };
        return redis_store.save_refs(store, 'Person', person, ref_list, function() {
          return done();
        });
      });
    });
    describe('add_to_collection', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('should add an object to a collection in the store', function(done) {
        var johan, lorraine, store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        johan = {
          id: 2,
          name: 'johan'
        };
        lorraine = {
          id: 5,
          name: 'lorraine'
        };
        return redis_store.add_to_collection(store, 'People', lorraine, function() {
          return redis_store.add_to_collection(store, 'People', johan, function() {
            return done();
          });
        });
      });
    });
    describe('load_collection', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('should load a collections ids', function(done) {
        var johan, lorraine, store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        johan = {
          id: 2,
          name: 'johan'
        };
        lorraine = {
          id: 5,
          name: 'lorraine'
        };
        return redis_store.add_to_collection(store, 'People', lorraine, function() {
          return redis_store.add_to_collection(store, 'People', johan, function() {
            return redis_store.load_collection(store, 'People', function(ids) {
              ids.length.should.equal(2);
              (__indexOf.call(ids, 2) >= 0).should.equal(true);
              (__indexOf.call(ids, 5) >= 0).should.equal(true);
              return done();
            });
          });
        });
      });
    });
    describe('load', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('should load an object from the store', function(done) {
        var person, store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        person = {
          id: 2,
          name: 'johan'
        };
        return redis_store.save(store, 'Person', person, function(saved_person) {
          return redis_store.load(store, 'Person', 2, function(loaded_person) {
            expect(loaded_person).to.exist;
            loaded_person.id.should.equal(2);
            loaded_person.name.should.equal('johan');
            return done();
          });
        });
      });
    });
    return describe('load_refs', function() {
      beforeEach(function(done) {
        return clear_db(done);
      });
      return it('should an objects refs to the store', function(done) {
        var person, ref_list, store;
        store = {
          client: redis.createClient()
        };
        store.client.select(debug_db);
        person = {
          id: 2,
          name: 'johan'
        };
        ref_list = {
          accounts: [1, 2],
          contact_details: [6, 5]
        };
        return redis_store.save_refs(store, 'Person', person, ref_list, function() {
          return redis_store.load_refs(store, 'Person', 2, ['accounts', 'contact_details'], function(loaded_ref_list) {
            expect(loaded_ref_list).to.exist;
            expect(loaded_ref_list['accounts']).to.exist;
            loaded_ref_list['accounts'].length.should.equal(2);
            loaded_ref_list['accounts'][0].should.equal('1');
            loaded_ref_list['accounts'][1].should.equal('2');
            expect(loaded_ref_list['contact_details']).to.exist;
            loaded_ref_list['contact_details'].length.should.equal(2);
            loaded_ref_list['contact_details'][0].should.equal('5');
            loaded_ref_list['contact_details'][1].should.equal('6');
            return done();
          });
        });
      });
    });
  });

}).call(this);
